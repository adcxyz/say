TITLE:: Say
summary:: speak text with OSX system voices
categories:: Speech Synthesis
related:: Classes/Speech

DESCRIPTION::
Say replaces the former OSX speech synthesis used in SuperCollider, Speech.
Because the underlying commandline program, 'say', is quite different, it does not work
as a straight replacement. Rather than badly reimplementing Speech, it allows full access
to the power of the 'say' program, and offers a few of its options conveniently.

Say is a function of the operating system and not the server. Thus, it does not generate sound on the server, and cannot be included as a sound source within other sound processes. However, one can patch system audio output to system input (by hardware of by software) and thus route Say-produced sound into the server for processing.

code::
// first of of, no need to preload voices
// - it finds all installed ones
Say.voices.printAll;"";

// like Speech:
"hi, this is the default voice speaking.".speak;
"hi, this is the default voice speaking.".say;
"hi, this is the first voice speaking.".say(0);
"hi, this is Anna's voice speaking.".say("Anna");


// each voice has a name, a language symbol, and an example text:
Say.voices.first.postln.asString.speak;

// new in Say - you can create events that will be converted to strings to speak:
(type: \say, text: "hi there, i'm talking with the default voice now").play;
(type: \say, text: "this is a random voice", voice: Say.voices.choose.name.postln).play;
(type: \say, text: "Anna aus Doytschland, oder Standard-stimme", voice: "Anna").play;

// check whether you have a certain voice
Say.isValidVoice("Anna");

// events can wait with next bit of code until first one is finished
// - Note that this blocks the interpreter while speaking!
(
"begin ...".postln;
(type: \say, text: "first sentence ... ", wait: true, ).play;
"first one done.".postln;
(type: \say, text: "then second sentence", wait: true).play;
"... and now second one done.".postln;
)

// when this is within a Routine, it just works without blocking:
(
fork {
	"begin ...".postln;
	(type: \say, text: "first sentence ... ", wait: true, ).play;
	"first one done.".postln;
	(type: \say, text: "then second sentence", wait: true).play;
	"... and now second one done.".postln;
}
)

// You can also use a doneFunc to do something when a say event is finished:
(type: \say, text: "hi there", doneFunc: { "done!".postcs }).play;


// access voices by number, and use wait
(
"hi, this is the first voice in Say.voices speaking".speak(0, true);
"hi, this is the second voice in Say.voices speaking".speak(1, false);
"hi, this is the third voice in Say.voices speaking".speak(2, false);
)

// 'say' has a lot of usage options that can also be scripted from SC.
// In the Terminal, enter 'man say' to read the say manual:
"/Applications/Utilities/Terminal.app".openOS;

// the rate parameter can be given as an event entry:
(type: \say, text: "hi there, i'm talking now", rate: 200).play;
(type: \say, text: "hi there, i'm talking now", rate: 500).play;

// or the same can be given as command string called 'cmds' :
(type: \say, text: "hi there, i'm talking now", cmds: "-r 500").play;

// other options include recording to a file:
(
(type: \say, text: "hi there, i'm talking now", wait: true, cmds: "-o ~/Desktop/hithere.aiff").play;
// and we used wait: true so the next action happens when done
"~/Desktop/hithere5.aiff".openOS;
)

// Unfortunately the wait option blocks supercollider until say is done,
// so this example could take a while before you can access the interpreter again:
(
Task {
	Say.voices.keep(5).do { |dict, i|
		dict.asString.speak(i, wait: true);
		1.wait;
	}
}.play;
)
// say is on average 30-40x faster than realtime (on a 2014 macbook pro),
// so writing soundfiles and reading them into buffers may be fast enough
// for some near realtime uses.
Pbind(\note, 24, \dur, 0.5, \legato, 0.1).play
(
Task {
	var time = Main.elapsedTime;
	var delta, sfdur;
	l = Say.voices.collect { |dict|
		var filename = "~/Desktop/%.aiff".format(dict.name).standardizePath;

		(type: \say, voice: dict.name, text: dict.exampleText,
			cmds: "-o" + filename, wait:true).play;
		delta = (Main.elapsedTime - time);

		sfdur = SoundFile.openRead(filename).duration;
		time = Main.elapsedTime;
		[dict.name.asSymbol, sfdur, delta, sfdur / delta].round(0.001).postln;
	};
	l.mean.postln;
}.play;
)
::

CLASSMETHODS::

METHOD:: voices
the list of installed voices

METHOD:: isValidVoice
check whether a symbol is a valid voice name.

METHOD:: addSayEvent, getVoices
used in initClass: adds an event type for say events,

METHOD:: getVoices,
used in initClass: gets the list of installed voices from the system.

