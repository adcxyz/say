TITLE:: Say
summary:: speak text with OSX system voices
categories:: Speech Synthesis
related:: Classes/Speech, Classes/SayBuf


DESCRIPTION::
Say replaces the deprecated former OSX speech synthesis used in SuperCollider, Speech.
Because the underlying commandline program, 'say', is quite different, it does not work
as a straight replacement. Rather than reimplementing Speech, it allows full access
to the power of the 'say' program, and offers some of its options conveniently.

The Say class is a class only, so it only has class methods, and no notion of instances of Say.

'say' is a function of the operating system and not the server. Thus, it does not generate sound on the server, and cannot be included as a sound source within other sound processes.
However, there are two ways to get say-based sound into SC servers:
1. Patching e.g. the system audio output to an audio input (by hardware of by software) and thus routing Say-produced (mono) sound into the server for processing.
2. Using the SayBuf class to render text as spoken soundfiles, and play those with buffers as full audio sources in SC.

You can try out and install voices for many languages in System Preferences/Dictation & Speech.

First examples:

code::
// Say finds all installed voices
Say.allVoices.size;
Say.fxVoices.size; // filter effects voices into here by default
Say.voices.size; // voices just has the normal ones

Say.allVoiceNames.printAll;"";
// each voice is a dict which has a name, a language name and short symbol,
// and an example text:
Say.allVoices.choose.cs;

// simple text reading methods
"hi, this is the default voice speaking.".say;
"hi, this is the first voice speaking.".say(0);
"hi, this is a voice speaking that was selected by name.".say("Alex");
"hi, dies ist hoffentlich eine deutsche Stimme, ausgesucht durch die Sprache.".say(lang: \de);

// replace uses of Speech/speak
"hi, this is the default voice speaking.".speak;

// each voice has a name, a language symbol, and an example text:
Say.voices.first.postln.say("Alex");
::

strong:: NEW Features in Say: (compared to Speech/speak) ::

1. Say any object:
code::
s.say; // "localhost"
[1, 2, 3, 4].scramble.say(lang: \en);
{ SinOsc.ar }.say("Anna"); // "a Function"
{ SinOsc.ar }.cs.say("Anna"); // "{ SinOsc.ar }"
Dictionary[\a -> 1, \b -> 2].say(lang: \en);
::

2. use events to create strings to be spoken :
code::
(type: \say, text: "hi there, i'm talking with the default voice now").play;
(type: \say, text: "this is a random voice", voice: Say.voices.choose.name.postln).play;
(type: \say, text: "Anna aus Doytschland, oder Standard-stimme", voice: "Anna").play;
::

3. access voices by languages
code::
// list of all short lang symbols
Say.allLangs.postcs
// list of all long langName strings
Say.allLangNames.postcs

// you can use either of these to check whether a language is present,
// or to get the list of the matching languages
Say.isValidLang(\en)
Say.voicesByLang("en")
Say.isValidLang(\en_GB) // any British speakers in da house?
Say.voicesByLang(\en_GB) // these ones

Say.isValidLang("pt") // alguem que fala portugues?
Say.voicesByLang("pt").size // in my case, 3 voices

Say.voicesByLang("pt").collect(_.langName) // 3 in my case
-> [ pt_BR, pt_PT, pt_BR ]  // one from portugal, 2 from brazil

Say.isValidLang("pt_BR") // so brazilian portuguese is valid
::

4. find voices by name of language:
code::
Say.findVoice(0); // by index in allVoices
Say.findVoice;    // default is nil, becomes default system voice
Say.defaultVoiceName;    // you can ask which it is

Say.findVoice(lang: \en); // random voice for a given language
Say.findVoice(lang: \pt).postcs; // in my case, one of the 3 above
Say.findVoice("Anna").postcs;  // if German, this is present
Say.findVoice("NoSuchVoice").postcs; // nonexisting voices become default voice
::

5. render spoken text to buffers, to use them as sound sources in SC:
code::
// text to be spoken, event for extra specs, action to do when buffer is ready
SayBuf.prepare( (text: "this is a buffered voice", bufAction: { |b| b.play }) )

// see more examples in
SayBuf.help;

// say four words through buffers as quickly as possible:
(
[\Multi, \Folder, \Sunny, \Beach].do { |txt|
	SayBuf.prepare((lang: \en, text: txt.asString, bufAction: { |b|
		txt.postln;
		b.play;
	}));
};
)


::

CLASSMETHODS::

private:: initClass, getVoices, getLangs, filterVoices, fillVoice, findVoice, addSayEvent


METHOD:: voices
the list of the available normal voices
METHOD:: voiceNames
the list of names of the available normal voices

METHOD:: allVoices
the list of all available voices
METHOD:: allVoiceNames
the list of names of all available voices

METHOD:: fxVoices
the list of the available fxVoices (the "funny" older voices provided by Apple.)
METHOD:: fxVoiceNames
the list of names of all fxVoices

METHOD:: allLangs
the list of all short lang name symbols
METHOD:: allLangNames
the list of all long langName strings

METHOD:: voicesByLang
return all voices found for the given lang name in optional argVoices (or voices or allVoices).
Say.voicesByLang(\en)

METHOD:: getDefaultVoice
get the current system voice name from macOS defaults (or nil if not set)
METHOD:: defaultVoiceName
get the system default voice name (cached from last call to .getDefaultVoice)

METHOD:: findVoice
find voice for given name.
When default is true and vocie not found, replace with defaultVoice

METHOD:: sayVoiceName
say given voice name and its language symbol

METHOD:: sayVoiceNames
find and say all voice names for a language


METHOD:: at
return the voice dict at <name>.

METHOD:: isValidVoice
check whether a symbol is a valid voice name.

METHOD:: isValidLang
check whether a symbol is a valid language name.

subsection:: Safety methods

Note:: The Say program can choke when too many say commands are requested at the same time, making a system restart necessary. The code:: maxPIDs :: variable protects against this: additional say commands will be ignored (and posted).::

Method:: maxPIDs
get and set the maximum number of say commands that will be processed at the same time. A

Method:: pendingPIDs
the current number of say commands in process

Note:: The say program handles rate commands a bit clumsily: rates outside the accepted range do not clip at the maximum, but fall back to normal rate! The methods code:: clipRate, minRate, maxRate:: address this.::

Method:: clipRate
get and set flag whether rate values will be clipped.

Say.maxRate
Method:: minRate, maxRate
get and set current maximum say rates (in syllables per second).
Default normal rate for most newer system voices is 180, minRate is 90, maxRate is 720.


Examples::
code::
// PLEASE SEE TOP EXAMPLES FIRST, then continue here:

// events can wait with next bit of code until first one is finished
// - Note that this blocks the interpreter while speaking!
(
"begin ...".postln;
(type: \say, text: "first sentence ... ", wait: true ).play;
"first one done.".postln;
(type: \say, text: "then second sentence", wait: true).play;
"... and now second one done.".postln;
)

// Within a Routine, you can add wait times, so you can stop the routine
// between spoken sentences
(
fork {
	"begin ...".postln;
	(type: \say, text: "first sentence ... ", wait: true).play;
	"first one done.".postln;
	1.wait;
	(type: \say, text: "then second sentence", wait: true).play;
	"... and now second one done.".postln;
}
)

// Unfortunately the wait option blocks supercollider until say is done,
// so this example could take a while before you can access the interpreter again:
(
Task {
	Say.voices.keep(5).do { |dict, i|
		dict.exampleText.asString.say(i, wait: true);
		// leave holes to stop with cmd-period:
		0.2.wait;
	}
}.play;
)

// You can also use a doneFunc to do something when a say event is finished:
(type: \say, text: "hi there", doneFunc: { "done!".postcs }).play;
// access voices by number, and use wait
(
"hi, this is the first voice in Say.voices speaking".speak(0, true);
// voice 2 and 3 speak in parallel:
"hi, this is the second voice in Say.voices speaking".speak(1, false);
"hi, this is the third voice in Say.voices speaking".speak(2, false);
)

// 'say' has some usage options that can also be scripted from SC.
// In the Terminal, enter 'man say' to read the say manual:
"/Applications/Utilities/Terminal.app".openOS;

// the rate parameter can be given as an event entry:
(type: \say, text: "hi there, i'm talking now", rate: 500).play;
(type: \say, text: "hi there, i'm talking now", rate: 200).play;
(type: \say, text: "hi there, i'm talking now", rate: 100).play;

// or the same can be given as command string called 'cmds', e.g. rate (syllables/min):
(type: \say, text: "hi there, i'm talking now", cmds: "-r 500").play;
(type: \say, text: "hi there, i'm talking now", cmds: "-r 100").play;

// other options include recording to a file:
(
(type: \say, text: "prepare text to buffer", wait: true, cmds: "-o ~/Desktop/text.aiff").play;
// and we used wait: true so the next action happens when done
"~/Desktop/text.aiff".openOS;
unixCmd("afplay" + "~/Desktop/text.aiff");
)

// For more examples on preparing speech buffers, see:
SayBuf.help
::
